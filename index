<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ValuuCompass Assessment Viewer</title>
    <!-- Supabase JS Client -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-align: center;
        }
        
        .controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .control-group {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        label {
            font-weight: 600;
            color: #555;
        }
        
        select {
            padding: 10px 15px;
            border: 2px solid #e1e8ed;
            border-radius: 4px;
            font-size: 16px;
            background-color: white;
            cursor: pointer;
            min-width: 250px;
            transition: border-color 0.3s;
        }
        
        select:hover {
            border-color: #3498db;
        }
        
        select:focus {
            outline: none;
            border-color: #2980b9;
        }
        
        .button {
            padding: 10px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .button:hover {
            background-color: #2980b9;
        }
        
        .button:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }
        
        .error {
            background-color: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        
        .data-grid {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .assessment-card {
            border-bottom: 1px solid #e1e8ed;
            padding: 20px;
            transition: background-color 0.2s;
        }
        
        .assessment-card:hover {
            background-color: #f8f9fa;
        }
        
        .assessment-card:last-child {
            border-bottom: none;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .indicator-info {
            flex: 1;
        }
        
        .indicator-code {
            font-size: 1.2em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .indicator-description {
            color: #555;
            font-size: 0.95em;
            margin-bottom: 5px;
        }
        
        .policy-objective {
            color: #7f8c8d;
            font-size: 0.9em;
            font-style: italic;
        }
        
        .scores {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .score-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
            text-align: center;
            min-width: 40px;
        }
        
        .score-label {
            font-size: 0.8em;
            color: #7f8c8d;
            margin-bottom: 3px;
        }
        
        .policy-score {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        
        .policy-score.zero {
            background-color: #ffebee;
            color: #c62828;
        }
        
        .policy-score.null {
            background-color: #f5f5f5;
            color: #9e9e9e;
        }
        
        .dq-score {
            background-color: #e3f2fd;
            color: #1565c0;
        }
        
        .value-score {
            background-color: #fff3e0;
            color: #e65100;
        }
        
        .value-score.null {
            background-color: #f5f5f5;
            color: #9e9e9e;
        }
        
        .confidence-score {
            background-color: #f3e5f5;
            color: #6a1b9a;
        }
        
        .confidence-low {
            background-color: #ffebee;
            color: #c62828;
        }
        
        .card-body {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 15px;
        }
        
        .text-section {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
        }
        
        .text-section h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 0.95em;
        }
        
        .text-content {
            color: #555;
            font-size: 0.9em;
            line-height: 1.5;
            max-height: 150px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .text-content::-webkit-scrollbar {
            width: 6px;
        }
        
        .text-content::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .text-content::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        
        .page-number {
            color: #7f8c8d;
            font-size: 0.85em;
            margin-top: 5px;
        }
        
        .confidence-section {
            grid-column: 1 / -1;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 10px;
        }
        
        .confidence-rationale {
            color: #555;
            font-size: 0.9em;
            line-height: 1.5;
        }
        
        .meta-info {
            display: flex;
            gap: 20px;
            color: #7f8c8d;
            font-size: 0.85em;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e1e8ed;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #7f8c8d;
        }
        
        .empty-state svg {
            width: 80px;
            height: 80px;
            margin-bottom: 20px;
            opacity: 0.3;
        }
        
        @media (max-width: 768px) {
            .card-body {
                grid-template-columns: 1fr;
            }
            
            .card-header {
                flex-direction: column;
            }
            
            .scores {
                width: 100%;
                justify-content: flex-start;
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ValuuCompass Assessment Viewer</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="companySelect">Select Company:</label>
                <select id="companySelect">
                    <option value="">Loading companies...</option>
                </select>
                <button class="button" onclick="loadAssessmentData()" id="loadButton" disabled>Load Assessment Data</button>
            </div>
        </div>
        
        <div id="errorContainer"></div>
        
        <div id="dataContainer">
            <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="9" y1="9" x2="15" y2="9"></line>
                    <line x1="9" y1="13" x2="15" y2="13"></line>
                    <line x1="9" y1="17" x2="11" y2="17"></line>
                </svg>
                <h3>No Assessment Selected</h3>
                <p>Please select a company from the dropdown above to view assessment data.</p>
            </div>
        </div>
    </div>

    <script>
        // Your Supabase credentials
        const SUPABASE_URL = 'https://ydnuxffwxdvcfydtkirw.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkbnV4ZmZ3eGR2Y2Z5ZHRraXJ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0Njk5NzEsImV4cCI6MjA2NzA0NTk3MX0.SlQNF6Bhjx4meod5OyGBTiHlHiunh0frNF3pm3qLRBQ'; // Get this from Supabase Dashboard > Settings > API
        
        // Initialize Supabase client
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadCompanies();
        });

        async function loadCompanies() {
            const select = document.getElementById('companySelect');
            select.innerHTML = '<option value="">Loading companies...</option>';
            
            try {
                // Query distinct companies from assessments table
                const { data: companies, error } = await supabase
                    .from('assessments')
                    .select('id, company_name')
                    .order('company_name');
                
                if (error) throw error;
                
                select.innerHTML = '<option value="">-- Select a Company --</option>';
                
                // Remove duplicates based on company name
                const uniqueCompanies = companies.reduce((acc, current) => {
                    const exists = acc.find(item => item.company_name === current.company_name);
                    if (!exists) {
                        acc.push(current);
                    }
                    return acc;
                }, []);
                
                uniqueCompanies.forEach(company => {
                    const option = document.createElement('option');
                    option.value = company.id;
                    option.textContent = company.company_name;
                    select.appendChild(option);
                });
                
            } catch (error) {
                console.error('Error loading companies:', error);
                select.innerHTML = '<option value="">Error loading companies</option>';
                showError('Failed to load companies: ' + error.message);
            }
            
            select.addEventListener('change', function() {
                document.getElementById('loadButton').disabled = !this.value;
            });
        }

        async function loadAssessmentData() {
            const assessmentId = document.getElementById('companySelect').value;
            if (!assessmentId) return;
            
            const container = document.getElementById('dataContainer');
            const errorContainer = document.getElementById('errorContainer');
            
            // Clear previous errors
            errorContainer.innerHTML = '';
            
            // Show loading state
            container.innerHTML = '<div class="loading">Loading assessment data...</div>';
            
            try {
                // Query assessment scores with joined data
                const { data: assessmentData, error } = await supabase
                    .from('assessment_scores')
                    .select(`
                        id,
                        assessment_id,
                        impact_domain,
                        performance_indicator,
                        pi_description,
                        policy_objective,
                        policy_score,
                        disclosure_quality_score,
                        value_score,
                        value_achievement_rate,
                        relevant_text_policy,
                        page_number_policy,
                        relevant_text_pi,
                        page_number_pi,
                        confidence_level,
                        confidence_rationale,
                        assessments!inner (
                            company_name,
                            frameworks (
                                stakeholder_name
                            )
                        )
                    `)
                    .eq('assessment_id', assessmentId)
                    .order('impact_domain')
                    .order('performance_indicator');
                
                if (error) throw error;
                
                // Transform the data to match our expected format
                const transformedData = assessmentData.map(item => ({
                    assessment_id: item.assessment_id,
                    company_name: item.assessments.company_name,
                    stakeholder: item.assessments.frameworks.stakeholder_name,
                    impact_domain: item.impact_domain,
                    performance_indicator: item.performance_indicator,
                    pi_description: item.pi_description,
                    policy_objective: item.policy_objective,
                    policy_score: item.policy_score,
                    disclosure_quality_score: item.disclosure_quality_score,
                    value_score: item.value_score,
                    value_achievement_rate: item.value_achievement_rate,
                    relevant_text_policy: item.relevant_text_policy,
                    page_number_policy: item.page_number_policy,
                    relevant_text_pi: item.relevant_text_pi,
                    page_number_pi: item.page_number_pi,
                    confidence_level: item.confidence_level,
                    confidence_rationale: item.confidence_rationale
                }));
                
                if (transformedData && transformedData.length > 0) {
                    displayAssessments(transformedData);
                } else {
                    container.innerHTML = `
                        <div class="empty-state">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" y1="8" x2="12" y2="12"></line>
                                <line x1="12" y1="16" x2="12.01" y2="16"></line>
                            </svg>
                            <h3>No Assessment Data Found</h3>
                            <p>No assessment data is available for the selected company.</p>
                        </div>
                    `;
                }
                
            } catch (error) {
                console.error('Error loading assessment data:', error);
                showError('Failed to load assessment data: ' + error.message);
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                        <h3>Error Loading Data</h3>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        function displayAssessments(assessments) {
            const container = document.getElementById('dataContainer');
            container.innerHTML = '<div class="data-grid"></div>';
            const grid = container.querySelector('.data-grid');
            
            assessments.forEach(assessment => {
                const card = createAssessmentCard(assessment);
                grid.appendChild(card);
            });
        }

        function createAssessmentCard(data) {
            const card = document.createElement('div');
            card.className = 'assessment-card';
            
            const policyScoreClass = data.policy_score === null ? 'null' : (data.policy_score === 0 ? 'zero' : '');
            const valueScoreClass = data.value_score === null ? 'null' : '';
            const confidenceClass = data.confidence_level < 0.8 ? 'confidence-low' : '';
            
            card.innerHTML = `
                <div class="card-header">
                    <div class="indicator-info">
                        <div class="indicator-code">${data.performance_indicator}</div>
                        <div class="indicator-description">${data.pi_description}</div>
                        <div class="policy-objective">${data.policy_objective}</div>
                    </div>
                    <div class="scores">
                        <div>
                            <div class="score-label">Policy</div>
                            <div class="score-badge policy-score ${policyScoreClass}">
                                ${data.policy_score === null ? 'N/A' : data.policy_score}
                            </div>
                        </div>
                        <div>
                            <div class="score-label">DQ</div>
                            <div class="score-badge dq-score">${data.disclosure_quality_score}</div>
                        </div>
                        <div>
                            <div class="score-label">Value</div>
                            <div class="score-badge value-score ${valueScoreClass}">
                                ${data.value_score === null ? 'N/A' : data.value_score}
                            </div>
                        </div>
                        <div>
                            <div class="score-label">Confidence</div>
                            <div class="score-badge confidence-score ${confidenceClass}">
                                ${(data.confidence_level * 100).toFixed(0)}%
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-body">
                    ${data.relevant_text_policy ? `
                        <div class="text-section">
                            <h4>Policy Text</h4>
                            <div class="text-content">${data.relevant_text_policy}</div>
                            ${data.page_number_policy ? `<div class="page-number">Page ${data.page_number_policy}</div>` : ''}
                        </div>
                    ` : ''}
                    
                    ${data.relevant_text_pi ? `
                        <div class="text-section">
                            <h4>Performance Indicator Text</h4>
                            <div class="text-content">${data.relevant_text_pi}</div>
                            ${data.page_number_pi ? `<div class="page-number">Page ${data.page_number_pi}</div>` : ''}
                        </div>
                    ` : ''}
                    
                    <div class="confidence-section">
                        <h4>Confidence Rationale</h4>
                        <div class="confidence-rationale">${data.confidence_rationale}</div>
                    </div>
                </div>
                
                <div class="meta-info">
                    <span><strong>Assessment ID:</strong> ${data.assessment_id}</span>
                    <span><strong>Domain:</strong> ${data.impact_domain}</span>
                    <span><strong>Stakeholder:</strong> ${data.stakeholder}</span>
                    ${data.value_achievement_rate ? `<span><strong>Achievement Rate:</strong> ${data.value_achievement_rate}</span>` : ''}
                </div>
            `;
            
            return card;
        }

        function showError(message) {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = `<div class="error">${message}</div>`;
        }
    </script>
</body>
</html>
