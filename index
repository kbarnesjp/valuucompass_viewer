<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ValuuCompass Assessment Viewer</title>
    <!-- Supabase JS Client -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <!-- Chart.js for Radar Chart -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        async function loadStakeholdersForCompany(companyAssessmentIds) {
            const assessmentIds = JSON.parse(companyAssessmentIds);
            
            try {
                // Query to get stakeholders for this company
                const { data: stakeholderData, error } = await supabase
                    .from('assessments')
                    .select('frameworks(stakeholder_name)')
                    .in('id', assessmentIds);
                
                if (error) throw error;
                
                // Extract unique stakeholders
                const stakeholders = [...new Set(stakeholderData.map(item => item.frameworks.stakeholder_name))];
                availableStakeholders = new Set(stakeholders);
                
                // Update stakeholder dropdown
                const stakeholderSelect = document.getElementById('stakeholderSelect');
                stakeholderSelect.innerHTML = '<option value="all">All Stakeholders</option>';
                
                stakeholders.sort().forEach(stakeholder => {
                    const option = document.createElement('option');
                    option.value = stakeholder;
                    option.textContent = stakeholder;
                    stakeholderSelect.appendChild(option);
                });
                
                // Show stakeholder selector
                stakeholderSelect.style.display = 'block';
                document.getElementById('stakeholderLabel').style.display = 'block';
                
                // Add change listener for stakeholder filter
                stakeholderSelect.onchange = function() {
                    activeFilters.stakeholder = this.value;
                    // If data is already loaded, apply filter immediately
                    if (allAssessmentData.length > 0) {
                        applyFilters();
                    }
                };
                
            } catch (error) {
                console.error('Error loading stakeholders:', error);
            }
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background-color: #f5f7fa;
            color: #333;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
            text-align: center;
        }
        
        .controls {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }
        
        .control-group {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }
        
        .filter-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            padding-top: 20px;
            border-top: 1px solid #e1e8ed;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }
        
        .filter-group label {
            font-size: 0.9em;
            color: #555;
            font-weight: 600;
        }
        
        .filter-buttons {
            display: flex;
            gap: 5px;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 6px 12px;
            border: 1px solid #e1e8ed;
            background: white;
            border-radius: 4px;
            font-size: 0.85em;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .filter-btn:hover {
            border-color: #3498db;
            background: #f0f8ff;
        }
        
        .filter-btn.active {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }
        
        .stats-bar {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
        }
        
        .stat-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .stat-label {
            font-size: 0.9em;
            color: #7f8c8d;
        }
        
        .stat-value {
            font-size: 1.1em;
            font-weight: bold;
            color: #2c3e50;
        }
        
        .clear-filters {
            padding: 8px 16px;
            background: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 0.9em;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .clear-filters:hover {
            background: #c0392b;
        }
        
        .chart-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            display: none;
        }
        
        .chart-wrapper {
            position: relative;
            height: 400px;
            margin: 20px auto;
            max-width: 600px;
        }
        
        .chart-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .chart-btn {
            padding: 8px 16px;
            border: 1px solid #3498db;
            background: white;
            color: #3498db;
            border-radius: 4px;
            font-size: 0.9em;
            cursor: pointer;
            transition: all 0.3s;
        }
        
        .chart-btn:hover {
            background: #3498db;
            color: white;
        }
        
        .chart-btn.active {
            background: #3498db;
            color: white;
        }
        
        .chart-legend {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
            font-size: 0.9em;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .legend-color {
            width: 20px;
            height: 3px;
            border-radius: 2px;
        }
        
        label {
            font-weight: 600;
            color: #555;
        }
        
        select {
            padding: 10px 15px;
            border: 2px solid #e1e8ed;
            border-radius: 4px;
            font-size: 16px;
            background-color: white;
            cursor: pointer;
            min-width: 250px;
            transition: border-color 0.3s;
        }
        
        select:hover {
            border-color: #3498db;
        }
        
        select:focus {
            outline: none;
            border-color: #2980b9;
        }
        
        .button {
            padding: 10px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .button:hover {
            background-color: #2980b9;
        }
        
        .button:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
        }
        
        .error {
            background-color: #e74c3c;
            color: white;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
        }
        
        .data-grid {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .assessment-card {
            border-bottom: 1px solid #e1e8ed;
            padding: 20px;
            transition: background-color 0.2s;
        }
        
        .assessment-card:hover {
            background-color: #f8f9fa;
        }
        
        .assessment-card:last-child {
            border-bottom: none;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .indicator-info {
            flex: 1;
        }
        
        .indicator-code {
            font-size: 1.2em;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .indicator-description {
            color: #555;
            font-size: 0.95em;
            margin-bottom: 5px;
        }
        
        .policy-objective {
            color: #7f8c8d;
            font-size: 0.9em;
            font-style: italic;
        }
        
        .scores {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .score-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
            text-align: center;
            min-width: 40px;
        }
        
        .score-label {
            font-size: 0.8em;
            color: #7f8c8d;
            margin-bottom: 3px;
        }
        
        .policy-score {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        
        .policy-score.zero {
            background-color: #ffebee;
            color: #c62828;
        }
        
        .policy-score.null {
            background-color: #f5f5f5;
            color: #9e9e9e;
        }
        
        .dq-score {
            background-color: #e3f2fd;
            color: #1565c0;
        }
        
        .value-score {
            background-color: #fff3e0;
            color: #e65100;
        }
        
        .value-score.null {
            background-color: #f5f5f5;
            color: #9e9e9e;
        }
        
        .confidence-score {
            background-color: #f3e5f5;
            color: #6a1b9a;
        }
        
        .confidence-low {
            background-color: #ffebee;
            color: #c62828;
        }
        
        .card-body {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 15px;
        }
        
        .text-section {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
        }
        
        .text-section h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 0.95em;
        }
        
        .text-content {
            color: #555;
            font-size: 0.9em;
            line-height: 1.5;
            max-height: 150px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .text-content::-webkit-scrollbar {
            width: 6px;
        }
        
        .text-content::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        .text-content::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }
        
        .page-number {
            color: #7f8c8d;
            font-size: 0.85em;
            margin-top: 5px;
        }
        
        .confidence-section {
            grid-column: 1 / -1;
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 10px;
        }
        
        .confidence-rationale {
            color: #555;
            font-size: 0.9em;
            line-height: 1.5;
        }
        
        .meta-info {
            display: flex;
            gap: 20px;
            color: #7f8c8d;
            font-size: 0.85em;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e1e8ed;
        }
        
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #7f8c8d;
        }
        
        .empty-state svg {
            width: 80px;
            height: 80px;
            margin-bottom: 20px;
            opacity: 0.3;
        }
        
        @media (max-width: 768px) {
            .card-body {
                grid-template-columns: 1fr;
            }
            
            .card-header {
                flex-direction: column;
            }
            
            .scores {
                width: 100%;
                justify-content: flex-start;
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ValuuCompass Assessment Viewer</h1>
        
        <div class="controls">
            <div class="control-group">
                <label for="companySelect">Select Company:</label>
                <select id="companySelect">
                    <option value="">Loading companies...</option>
                </select>
                <label for="stakeholderSelect" id="stakeholderLabel" style="display: none;">Select Stakeholder:</label>
                <select id="stakeholderSelect" style="display: none;">
                    <option value="all">All Stakeholders</option>
                </select>
                <button class="button" onclick="loadAssessmentData()" id="loadButton" disabled>Load Assessment Data</button>
            </div>
            
            <div class="filter-controls" id="filterControls" style="display: none;">
                <div class="filter-group">
                    <label>Policy Score:</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="policy" data-value="all">All</button>
                        <button class="filter-btn" data-filter="policy" data-value="1">Present (1)</button>
                        <button class="filter-btn" data-filter="policy" data-value="0">Absent (0)</button>
                        <button class="filter-btn" data-filter="policy" data-value="null">N/A</button>
                    </div>
                </div>
                
                <div class="filter-group">
                    <label>Disclosure Quality Score:</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="dq" data-value="all">All</button>
                        <button class="filter-btn" data-filter="dq" data-value="0">0</button>
                        <button class="filter-btn" data-filter="dq" data-value="1">1</button>
                        <button class="filter-btn" data-filter="dq" data-value="2">2</button>
                        <button class="filter-btn" data-filter="dq" data-value="3">3</button>
                    </div>
                </div>
                
                <div class="filter-group">
                    <label>Value Score:</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="value" data-value="all">All</button>
                        <button class="filter-btn" data-filter="value" data-value="low">Low (0-3)</button>
                        <button class="filter-btn" data-filter="value" data-value="medium">Med (4-7)</button>
                        <button class="filter-btn" data-filter="value" data-value="high">High (8-10)</button>
                        <button class="filter-btn" data-filter="value" data-value="null">N/A</button>
                    </div>
                </div>
                
                <div class="filter-group">
                    <label>Confidence Level:</label>
                    <div class="filter-buttons">
                        <button class="filter-btn" data-filter="confidence" data-value="all">All</button>
                        <button class="filter-btn" data-filter="confidence" data-value="low">Low (<50%)</button>
                        <button class="filter-btn" data-filter="confidence" data-value="medium">Med (50-79%)</button>
                        <button class="filter-btn" data-filter="confidence" data-value="high">High (≥80%)</button>
                    </div>
                </div>
            </div>
            
            <div class="stats-bar" id="statsBar" style="display: none;">
                <div class="stat-item">
                    <span class="stat-label">Total Indicators:</span>
                    <span class="stat-value" id="totalCount">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Filtered:</span>
                    <span class="stat-value" id="filteredCount">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Avg DQ Score:</span>
                    <span class="stat-value" id="avgDQ">0</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Avg Confidence:</span>
                    <span class="stat-value" id="avgConfidence">0%</span>
                </div>
                <button class="clear-filters" onclick="clearAllFilters()">Clear All Filters</button>
            </div>
        </div>
        
        <div class="chart-container" id="chartContainer">
            <h2 style="color: #2c3e50; margin-bottom: 20px; text-align: center;">Performance Overview - Radar Chart</h2>
            <div class="chart-controls">
                <button class="chart-btn active" onclick="updateChartType('domain')">By Impact Domain</button>
                <button class="chart-btn" onclick="updateChartType('stakeholder')">By Stakeholder</button>
                <button class="chart-btn" onclick="updateChartType('score-type')">By Score Type</button>
            </div>
            <div class="chart-wrapper">
                <canvas id="radarChart"></canvas>
            </div>
            <div class="chart-legend" id="chartLegend"></div>
        </div>
        
        <div id="errorContainer"></div>
        
        <div id="dataContainer">
            <div class="empty-state">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="9" y1="9" x2="15" y2="9"></line>
                    <line x1="9" y1="13" x2="15" y2="13"></line>
                    <line x1="9" y1="17" x2="11" y2="17"></line>
                </svg>
                <h3>No Assessment Selected</h3>
                <p>Please select a company from the dropdown above to view assessment data.</p>
            </div>
        </div>
    </div>

    <script>
        // Your Supabase credentials
        const SUPABASE_URL = 'https://ydnuxffwxdvcfydtkirw.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlkbnV4ZmZ3eGR2Y2Z5ZHRraXJ3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0Njk5NzEsImV4cCI6MjA2NzA0NTk3MX0.SlQNF6Bhjx4meod5OyGBTiHlHiunh0frNF3pm3qLRBQ'; // Get this from Supabase Dashboard > Settings > API
        
        // Initialize Supabase client
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // Global variables for filtering
        let allAssessmentData = [];
        let activeFilters = {
            policy: 'all',
            dq: 'all',
            value: 'all',
            confidence: 'all',
            stakeholder: 'all'
        };
        let availableStakeholders = new Set();
        let radarChart = null;
        let currentChartType = 'domain';

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            loadCompanies();
            setupFilterButtons();
        });

        function setupFilterButtons() {
            // Add click handlers to all filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const filterType = this.dataset.filter;
                    const filterValue = this.dataset.value;
                    
                    // Update active state
                    document.querySelectorAll(`[data-filter="${filterType}"]`).forEach(b => {
                        b.classList.remove('active');
                    });
                    this.classList.add('active');
                    
                    // Update filter
                    activeFilters[filterType] = filterValue;
                    applyFilters();
                });
            });
            
            // Set initial active states
            document.querySelectorAll('[data-value="all"]').forEach(btn => {
                btn.classList.add('active');
            });
        }

        async function loadCompanies() {
            const select = document.getElementById('companySelect');
            select.innerHTML = '<option value="">Loading companies...</option>';
            
            try {
                // Query distinct companies from assessments table
                const { data: assessments, error } = await supabase
                    .from('assessments')
                    .select('id, company_name')
                    .order('company_name');
                
                if (error) throw error;
                
                select.innerHTML = '<option value="">-- Select a Company --</option>';
                
                // Group by company name to get unique companies
                const companyMap = new Map();
                assessments.forEach(assessment => {
                    if (!companyMap.has(assessment.company_name)) {
                        companyMap.set(assessment.company_name, []);
                    }
                    companyMap.get(assessment.company_name).push(assessment.id);
                });
                
                // Create options for each unique company
                companyMap.forEach((assessmentIds, companyName) => {
                    const option = document.createElement('option');
                    option.value = JSON.stringify(assessmentIds); // Store all assessment IDs
                    option.textContent = companyName;
                    select.appendChild(option);
                });
                
            } catch (error) {
                console.error('Error loading companies:', error);
                select.innerHTML = '<option value="">Error loading companies</option>';
                showError('Failed to load companies: ' + error.message);
            }
            
            select.addEventListener('change', function() {
                const hasSelection = this.value !== '';
                document.getElementById('loadButton').disabled = !hasSelection;
                
                // Show/hide stakeholder selector
                if (hasSelection) {
                    loadStakeholdersForCompany(this.value);
                } else {
                    document.getElementById('stakeholderSelect').style.display = 'none';
                    document.getElementById('stakeholderLabel').style.display = 'none';
                }
            });
        }

        async function loadAssessmentData() {
            const selectedValue = document.getElementById('companySelect').value;
            if (!selectedValue) return;
            
            const assessmentIds = JSON.parse(selectedValue);
            const container = document.getElementById('dataContainer');
            const errorContainer = document.getElementById('errorContainer');
            
            // Clear previous errors
            errorContainer.innerHTML = '';
            
            // Show loading state
            container.innerHTML = '<div class="loading">Loading assessment data...</div>';
            
            try {
                // Query assessment scores for ALL assessment IDs for this company
                const { data: assessmentData, error } = await supabase
                    .from('assessment_scores')
                    .select(`
                        id,
                        assessment_id,
                        impact_domain,
                        performance_indicator,
                        pi_description,
                        policy_objective,
                        policy_score,
                        disclosure_quality_score,
                        value_score,
                        value_achievement_rate,
                        relevant_text_policy,
                        page_number_policy,
                        relevant_text_pi,
                        page_number_pi,
                        confidence_level,
                        confidence_rationale,
                        assessments!inner (
                            company_name,
                            frameworks (
                                stakeholder_name
                            )
                        )
                    `)
                    .in('assessment_id', assessmentIds)  // Get data for ALL assessments of this company
                    .order('impact_domain')
                    .order('performance_indicator');
                
                if (error) throw error;
                
                // Transform the data to match our expected format
                const transformedData = assessmentData.map(item => ({
                    assessment_id: item.assessment_id,
                    company_name: item.assessments.company_name,
                    stakeholder: item.assessments.frameworks.stakeholder_name,
                    impact_domain: item.impact_domain,
                    performance_indicator: item.performance_indicator,
                    pi_description: item.pi_description,
                    policy_objective: item.policy_objective,
                    policy_score: item.policy_score,
                    disclosure_quality_score: item.disclosure_quality_score,
                    value_score: item.value_score,
                    value_achievement_rate: item.value_achievement_rate,
                    relevant_text_policy: item.relevant_text_policy,
                    page_number_policy: item.page_number_policy,
                    relevant_text_pi: item.relevant_text_pi,
                    page_number_pi: item.page_number_pi,
                    confidence_level: item.confidence_level,
                    confidence_rationale: item.confidence_rationale
                }));
                
                if (transformedData && transformedData.length > 0) {
                    // Store data globally for filtering
                    allAssessmentData = transformedData;
                    
                    // Show filter controls and chart
                    document.getElementById('filterControls').style.display = 'grid';
                    document.getElementById('statsBar').style.display = 'flex';
                    document.getElementById('chartContainer').style.display = 'block';
                    
                    // Apply stakeholder filter from dropdown
                    activeFilters.stakeholder = document.getElementById('stakeholderSelect').value || 'all';
                    
                    // Apply current filters
                    applyFilters();
                } else {
                    container.innerHTML = `
                        <div class="empty-state">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" y1="8" x2="12" y2="12"></line>
                                <line x1="12" y1="16" x2="12.01" y2="16"></line>
                            </svg>
                            <h3>No Assessment Data Found</h3>
                            <p>No assessment data is available for the selected company.</p>
                        </div>
                    `;
                }
                
            } catch (error) {
                console.error('Error loading assessment data:', error);
                showError('Failed to load assessment data: ' + error.message);
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="15" y1="9" x2="9" y2="15"></line>
                            <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                        <h3>Error Loading Data</h3>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }

        function applyFilters() {
            const filteredData = allAssessmentData.filter(item => {
                // Stakeholder filter
                if (activeFilters.stakeholder !== 'all' && item.stakeholder !== activeFilters.stakeholder) {
                    return false;
                }
                
                // Policy score filter
                if (activeFilters.policy !== 'all') {
                    if (activeFilters.policy === 'null' && item.policy_score !== null) return false;
                    if (activeFilters.policy !== 'null' && item.policy_score !== parseInt(activeFilters.policy)) return false;
                }
                
                // DQ score filter
                if (activeFilters.dq !== 'all') {
                    if (item.disclosure_quality_score !== parseInt(activeFilters.dq)) return false;
                }
                
                // Value score filter
                if (activeFilters.value !== 'all') {
                    if (activeFilters.value === 'null' && item.value_score !== null) return false;
                    if (activeFilters.value === 'low' && (item.value_score === null || item.value_score > 3)) return false;
                    if (activeFilters.value === 'medium' && (item.value_score === null || item.value_score < 4 || item.value_score > 7)) return false;
                    if (activeFilters.value === 'high' && (item.value_score === null || item.value_score < 8)) return false;
                }
                
                // Confidence filter
                if (activeFilters.confidence !== 'all') {
                    const conf = item.confidence_level * 100;
                    if (activeFilters.confidence === 'low' && conf >= 50) return false;
                    if (activeFilters.confidence === 'medium' && (conf < 50 || conf >= 80)) return false;
                    if (activeFilters.confidence === 'high' && conf < 80) return false;
                }
                
                return true;
            });
            
            // Update stats
            updateStats(filteredData);
            
            // Group by stakeholder
            const groupedData = filteredData.reduce((acc, item) => {
                if (!acc[item.stakeholder]) {
                    acc[item.stakeholder] = [];
                }
                acc[item.stakeholder].push(item);
                return acc;
            }, {            });
            
            displayAssessmentsGrouped(groupedData);
            
            // Update radar chart
            updateRadarChart(filteredData);
        }
        
        function updateStats(filteredData) {
            document.getElementById('totalCount').textContent = allAssessmentData.length;
            document.getElementById('filteredCount').textContent = filteredData.length;
            
            if (filteredData.length > 0) {
                const avgDQ = filteredData.reduce((sum, item) => sum + item.disclosure_quality_score, 0) / filteredData.length;
                const avgConf = filteredData.reduce((sum, item) => sum + item.confidence_level, 0) / filteredData.length;
                
                document.getElementById('avgDQ').textContent = avgDQ.toFixed(1);
                document.getElementById('avgConfidence').textContent = (avgConf * 100).toFixed(0) + '%';
            } else {
                document.getElementById('avgDQ').textContent = '0';
                document.getElementById('avgConfidence').textContent = '0%';
            }
        }
        
        function clearAllFilters() {
            // Reset all filters
            activeFilters = {
                policy: 'all',
                dq: 'all',
                value: 'all',
                confidence: 'all',
                stakeholder: document.getElementById('stakeholderSelect').value || 'all'
            };
            
            // Reset button states
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelectorAll('[data-value="all"]').forEach(btn => {
                btn.classList.add('active');
            });
            
            // Reapply filters
            applyFilters();
        }

        function displayAssessmentsGrouped(groupedData) {
            const container = document.getElementById('dataContainer');
            container.innerHTML = '';
            
            if (Object.keys(groupedData).length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="8" y1="12" x2="16" y2="12"></line>
                        </svg>
                        <h3>No Results Match Your Filters</h3>
                        <p>Try adjusting your filter criteria or clear all filters.</p>
                    </div>
                `;
                return;
            }
            
            // Create a section for each stakeholder
            Object.keys(groupedData).sort().forEach(stakeholder => {
                const stakeholderSection = document.createElement('div');
                stakeholderSection.innerHTML = `
                    <h2 style="color: #2c3e50; margin: 30px 0 20px 0; padding: 10px; background: #ecf0f1; border-radius: 4px; display: flex; justify-content: space-between; align-items: center;">
                        <span>${stakeholder} Stakeholder Assessment</span>
                        <span style="font-size: 0.7em; font-weight: normal;">${groupedData[stakeholder].length} indicators</span>
                    </h2>
                `;
                
                const grid = document.createElement('div');
                grid.className = 'data-grid';
                
                groupedData[stakeholder].forEach(assessment => {
                    const card = createAssessmentCard(assessment);
                    grid.appendChild(card);
                });
                
                stakeholderSection.appendChild(grid);
                container.appendChild(stakeholderSection);
            });
        }

        function displayAssessments(assessments) {
            const container = document.getElementById('dataContainer');
            container.innerHTML = '<div class="data-grid"></div>';
            const grid = container.querySelector('.data-grid');
            
            assessments.forEach(assessment => {
                const card = createAssessmentCard(assessment);
                grid.appendChild(card);
            });
        }

        function createAssessmentCard(data) {
            const card = document.createElement('div');
            card.className = 'assessment-card';
            
            const policyScoreClass = data.policy_score === null ? 'null' : (data.policy_score === 0 ? 'zero' : '');
            const valueScoreClass = data.value_score === null ? 'null' : '';
            const confidenceClass = data.confidence_level < 0.8 ? 'confidence-low' : '';
            
            card.innerHTML = `
                <div class="card-header">
                    <div class="indicator-info">
                        <div class="indicator-code">${data.performance_indicator}</div>
                        <div class="indicator-description">${data.pi_description}</div>
                        <div class="policy-objective">${data.policy_objective}</div>
                    </div>
                    <div class="scores">
                        <div>
                            <div class="score-label">Policy</div>
                            <div class="score-badge policy-score ${policyScoreClass}">
                                ${data.policy_score === null ? 'N/A' : data.policy_score}
                            </div>
                        </div>
                        <div>
                            <div class="score-label">DQ</div>
                            <div class="score-badge dq-score">${data.disclosure_quality_score}</div>
                        </div>
                        <div>
                            <div class="score-label">Value</div>
                            <div class="score-badge value-score ${valueScoreClass}">
                                ${data.value_score === null ? 'N/A' : data.value_score}
                            </div>
                        </div>
                        <div>
                            <div class="score-label">Confidence</div>
                            <div class="score-badge confidence-score ${confidenceClass}">
                                ${(data.confidence_level * 100).toFixed(0)}%
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card-body">
                    ${data.relevant_text_policy ? `
                        <div class="text-section">
                            <h4>Policy Text</h4>
                            <div class="text-content">${data.relevant_text_policy}</div>
                            ${data.page_number_policy ? `<div class="page-number">Page ${data.page_number_policy}</div>` : ''}
                        </div>
                    ` : ''}
                    
                    ${data.relevant_text_pi ? `
                        <div class="text-section">
                            <h4>Performance Indicator Text</h4>
                            <div class="text-content">${data.relevant_text_pi}</div>
                            ${data.page_number_pi ? `<div class="page-number">Page ${data.page_number_pi}</div>` : ''}
                        </div>
                    ` : ''}
                    
                    <div class="confidence-section">
                        <h4>Confidence Rationale</h4>
                        <div class="confidence-rationale">${data.confidence_rationale}</div>
                    </div>
                </div>
                
                <div class="meta-info">
                    <span><strong>Assessment ID:</strong> ${data.assessment_id}</span>
                    <span><strong>Domain:</strong> ${data.impact_domain}</span>
                    <span><strong>Stakeholder:</strong> ${data.stakeholder}</span>
                                            ${data.value_achievement_rate ? `<span><strong>Achievement Rate:</strong> ${data.value_achievement_rate}</span>` : ''}
                    </div>
                </div>
            `;
            
            return card;
        }
        function showError(message) {
            const errorContainer = document.getElementById('errorContainer');
            errorContainer.innerHTML = `<div class="error">${message}</div>`;
        }
        
        // Radar Chart Functions
        function updateChartType(type) {
            currentChartType = type;
            
            // Update button states
            document.querySelectorAll('.chart-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');
            
            // Get current filtered data
            const filteredData = allAssessmentData.filter(item => {
                if (activeFilters.stakeholder !== 'all' && item.stakeholder !== activeFilters.stakeholder) return false;
                if (activeFilters.policy !== 'all') {
                    if (activeFilters.policy === 'null' && item.policy_score !== null) return false;
                    if (activeFilters.policy !== 'null' && item.policy_score !== parseInt(activeFilters.policy)) return false;
                }
                if (activeFilters.dq !== 'all' && item.disclosure_quality_score !== parseInt(activeFilters.dq)) return false;
                if (activeFilters.value !== 'all') {
                    if (activeFilters.value === 'null' && item.value_score !== null) return false;
                    if (activeFilters.value === 'low' && (item.value_score === null || item.value_score > 3)) return false;
                    if (activeFilters.value === 'medium' && (item.value_score === null || item.value_score < 4 || item.value_score > 7)) return false;
                    if (activeFilters.value === 'high' && (item.value_score === null || item.value_score < 8)) return false;
                }
                if (activeFilters.confidence !== 'all') {
                    const conf = item.confidence_level * 100;
                    if (activeFilters.confidence === 'low' && conf >= 50) return false;
                    if (activeFilters.confidence === 'medium' && (conf < 50 || conf >= 80)) return false;
                    if (activeFilters.confidence === 'high' && conf < 80) return false;
                }
                return true;
            });
            
            updateRadarChart(filteredData);
        }
        
        function updateRadarChart(data) {
            if (data.length === 0) {
                if (radarChart) {
                    radarChart.destroy();
                    radarChart = null;
                }
                return;
            }
            
            let chartData;
            
            switch (currentChartType) {
                case 'domain':
                    chartData = prepareDataByDomain(data);
                    break;
                case 'stakeholder':
                    chartData = prepareDataByStakeholder(data);
                    break;
                case 'score-type':
                    chartData = prepareDataByScoreType(data);
                    break;
            }
            
            const ctx = document.getElementById('radarChart').getContext('2d');
            
            if (radarChart) {
                radarChart.destroy();
            }
            
            radarChart = new Chart(ctx, {
                type: 'radar',
                data: chartData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: getChartTitle(),
                            font: {
                                size: 16
                            }
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                stepSize: 20
                            },
                            pointLabels: {
                                font: {
                                    size: 12
                                }
                            }
                        }
                    }
                }
            });
            
            updateChartLegend(chartData);
        }
        
        function getChartTitle() {
            switch (currentChartType) {
                case 'domain':
                    return 'Average Scores by Impact Domain';
                case 'stakeholder':
                    return 'Average Scores by Stakeholder';
                case 'score-type':
                    return 'Distribution by Score Type';
            }
        }
        
        function prepareDataByDomain(data) {
            const domains = {};
            
            data.forEach(item => {
                if (!domains[item.impact_domain]) {
                    domains[item.impact_domain] = {
                        totalDQ: 0,
                        totalValue: 0,
                        valueCount: 0,
                        count: 0
                    };
                }
                
                domains[item.impact_domain].totalDQ += item.disclosure_quality_score;
                if (item.value_score !== null) {
                    domains[item.impact_domain].totalValue += item.value_score;
                    domains[item.impact_domain].valueCount++;
                }
                domains[item.impact_domain].count++;
            });
            
            const labels = Object.keys(domains);
            const dqScores = labels.map(domain => 
                ((domains[domain].totalDQ / domains[domain].count) / 3 * 100).toFixed(1)
            );
            const valueScores = labels.map(domain => 
                domains[domain].valueCount > 0 
                    ? ((domains[domain].totalValue / domains[domain].valueCount) / 10 * 100).toFixed(1)
                    : 0
            );
            
            return {
                labels: labels,
                datasets: [
                    {
                        label: 'Disclosure Quality',
                        data: dqScores,
                        borderColor: '#3498db',
                        backgroundColor: 'rgba(52, 152, 219, 0.2)',
                        borderWidth: 2
                    },
                    {
                        label: 'Value Score',
                        data: valueScores,
                        borderColor: '#e74c3c',
                        backgroundColor: 'rgba(231, 76, 60, 0.2)',
                        borderWidth: 2
                    }
                ]
            };
        }
        
        function prepareDataByStakeholder(data) {
            const stakeholders = {};
            
            data.forEach(item => {
                if (!stakeholders[item.stakeholder]) {
                    stakeholders[item.stakeholder] = {
                        totalDQ: 0,
                        totalValue: 0,
                        valueCount: 0,
                        count: 0,
                        policyPresent: 0
                    };
                }
                
                stakeholders[item.stakeholder].totalDQ += item.disclosure_quality_score;
                if (item.value_score !== null) {
                    stakeholders[item.stakeholder].totalValue += item.value_score;
                    stakeholders[item.stakeholder].valueCount++;
                }
                if (item.policy_score === 1) {
                    stakeholders[item.stakeholder].policyPresent++;
                }
                stakeholders[item.stakeholder].count++;
            });
            
            const labels = Object.keys(stakeholders);
            const overallScores = labels.map(stakeholder => {
                const s = stakeholders[stakeholder];
                const avgDQ = (s.totalDQ / s.count) / 3 * 100;
                const avgValue = s.valueCount > 0 ? (s.totalValue / s.valueCount) / 10 * 100 : 0;
                const policyRate = (s.policyPresent / s.count) * 100;
                return ((avgDQ + avgValue + policyRate) / 3).toFixed(1);
            });
            
            return {
                labels: labels,
                datasets: [{
                    label: 'Overall Performance',
                    data: overallScores,
                    borderColor: '#9b59b6',
                    backgroundColor: 'rgba(155, 89, 182, 0.2)',
                    borderWidth: 2
                }]
            };
        }
        
        function prepareDataByScoreType(data) {
            const scoreTypes = {
                'Policy Present': 0,
                'High DQ (3)': 0,
                'Medium DQ (2)': 0,
                'Low DQ (0-1)': 0,
                'High Value (8-10)': 0,
                'Medium Value (4-7)': 0,
                'Low Value (0-3)': 0,
                'High Confidence': 0
            };
            
            data.forEach(item => {
                if (item.policy_score === 1) scoreTypes['Policy Present']++;
                if (item.disclosure_quality_score === 3) scoreTypes['High DQ (3)']++;
                if (item.disclosure_quality_score === 2) scoreTypes['Medium DQ (2)']++;
                if (item.disclosure_quality_score <= 1) scoreTypes['Low DQ (0-1)']++;
                
                if (item.value_score !== null) {
                    if (item.value_score >= 8) scoreTypes['High Value (8-10)']++;
                    else if (item.value_score >= 4) scoreTypes['Medium Value (4-7)']++;
                    else scoreTypes['Low Value (0-3)']++;
                }
                
                if (item.confidence_level >= 0.8) scoreTypes['High Confidence']++;
            });
            
            const total = data.length;
            const labels = Object.keys(scoreTypes);
            const percentages = labels.map(label => 
                ((scoreTypes[label] / total) * 100).toFixed(1)
            );
            
            return {
                labels: labels,
                datasets: [{
                    label: 'Percentage of Indicators',
                    data: percentages,
                    borderColor: '#2ecc71',
                    backgroundColor: 'rgba(46, 204, 113, 0.2)',
                    borderWidth: 2
                }]
            };
        }
        
        function updateChartLegend(chartData) {
            const legendContainer = document.getElementById('chartLegend');
            legendContainer.innerHTML = '';
            
            chartData.datasets.forEach(dataset => {
                const legendItem = document.createElement('div');
                legendItem.className = 'legend-item';
                legendItem.innerHTML = `
                    <div class="legend-color" style="background-color: ${dataset.borderColor}"></div>
                    <span>${dataset.label}</span>
                `;
                legendContainer.appendChild(legendItem);
            });
        }
    </script>
</body>
</html>
